local M = {}

function M.get(c, opts)
  -- stylua: ignore  
	return {
    Foo                         = { bg = c.pink, fg = c.fg },

    Comment                     = { fg = c.green, italic = opts.styles.comments.italics, bold = opts.styles.comments.bold },
    ColorColumn                 = { bg = c.bg_float },
    Conceal                     = { fg = c.bg_float },
    Cursor                      = { fg = c.bg, bg = c.fg },
    lCursor                     = { fg = c.bg, bg = c.fg },
    CursorIM                    = { fg = c.bg, bg = c.fg },
    CursorColumn                = { bg = c.cursorline },
    CursorLine                  = { bg = c.cursorline },
    Directory                   = { fg = c.lightgreen },
    DiffAdd                     = { bg = c.diff.add },
    DiffChange                  = { bg = c.diff.change },
    DiffDelete                  = { bg = c.diff.delete },
    DiffText                    = { bg = c.bg_visual },
    EndOfBuffer                 = { fg = c.bg },
    ErrorMsg                    = { fg = c.red },
    VertSplit                   = { fg = c.separator },
    WinSeparator                = { fg = c.separator, bold = true },
    Folded                      = { fg = c.gray, bg = c.bg_visual },
    FoldColumn                  = { bg = opts.transparent and c.none or c.bg, fg = c.green },
    SignColumn                  = { bg = opts.transparent and c.none or c.bg, fg = c.green },
    SignColumnSB                = { fg = c.green },
    Substitute                  = { bg = c.red, fg = c.bg },
    LineNr                      = { fg = c.number },
    CursorLineNr                = { fg = c.yellow, bg = c.bg, bold = true },
    LineNrAbove                 = "LineNr",
    LineNrBelow                 = "LineNr",
    MatchParen                  = { fg = c.red0, bold = true },
    ModeMsg                     = { fg = c.fg, bold = true },
    MsgArea                     = { fg = c.gray },
    MoreMsg                     = { fg = c.blue },
    NonText                     = { fg = c.bg_float },
    Normal                      = { fg = c.fg, bg = opts.transparent and c.none or c.bg },
    NormalNC                    = { fg = c.fg, bg = opts.transparent and c.none or c.bg },
    NormalSB                    = { fg = c.fg, bg = c.bg },
    NormalFloat                 = { fg = c.fg, bg = c.bg_float },
    FloatBorder                 = { fg = c.separator, bg = c.separator },
    FloatTitle                  = { fg = c.separator, bg = c.statusbar },
    Pmenu                       = { bg = c.bg_float, fg = c.fg },
    PmenuMatch                  = { bg = c.cursorline, fg = c.blue },
    PmenuSel                    = { bg = c.cursorline },
    PmenuMatchSel               = { bg = c.cursorline },
    PmenuSbar                   = { bg = c.separator },
    PmenuThumb                  = { bg = c.bg_visual },
    Question                    = { fg = c.blue },
    QuickFixLine                = { bg = c.bg_visual, bold = true },
    Search                      = { bg = c.lightgreen, fg = c.bg },
    IncSearch                   = { bg = c.orange, fg = c.bg },
    CurSearch                   =  "IncSearch",
    SpecialKey                  = { fg = c.separator },
    SpellBad                    = { sp = c.red, underline = true },
    SpellCap                    = { sp = c.yellow0, underline = true },
    SpellLocal                  = { sp = c.yellow0, underline = true },
    SpellRare                   = { sp = c.blue, underline = true },
    StatusLine                  = { fg = c.fg, bg = c.statusbar },
    StatusLineNC                = { fg = c.gray, bg = c.bg },
    TabLine                     = { bg = c.statusbar, fg = c.green },
    TabLineFill                 = { bg = opts.transparent and c.none or c.statusbar, fg = c.lightgreen },
    TabLineSel                  = { fg = c.bg, bg = c.cyan },
    Title                       = { fg = c.blue, bold = true },
    Visual                      = { bg = c.bg_visual },
    VisualNOS                   = { bg = c.bg_visual },
    WarningMsg                  = { fg = c.yellow0 },
    Whitespace                  = { fg = c.fg },
    WildMenu                    = { bg = c.bg_visual },
    WinBar                      = "StatusLine",
    WinBarNC                    = "StatusLineNC",

    Bold                        = { bold = true, fg = c.fg },
    Character                   = { fg = c.green },
    Constant                    = { fg = c.yellow },
    Debug                       = { fg = c.orange },
    Delimiter                   =  "Special",
    Error                       = { fg = c.red0 },
    Function                    = { fg = c.pink },
    Identifier                  = { fg = c.lightblue },
    Italic                      = { italic = true, fg = c.fg },
    Include                     = "Keyword",
    Keyword                     = { fg = c.orange, italic = opts.styles.keywords.italics, bold = opts.styles.keywords.bold },
    Operator                    = { fg = c.red },
    PreProc                     = { fg = c.green1 },
    Special                     = { fg = c.green1 },
    Statement                   = { fg = c.orange },
    String                      = { fg = c.lightgreen, italic = opts.styles.strings.italics, bold = opts.styles.strings.bold }, -- left off here
    Todo                        = { bg = c.yellow, fg = c.bg },
    Type                        = { fg = c.cyan },
    Underlined                  = { underline = true },
    debugBreakpoint             = { bg = c.red0 },
    debugPC                     = { bg = c.bg_float },
    dosIniLabel                 = "@property",
    helpCommand                 = { bg = c.separator, fg = c.blue },
    htmlH1                      = { fg = c.pink, bold = true },
    htmlH2                      = { fg = c.blue, bold = true },
    qfFileName                  = { fg = c.blue },
    qfLineNr                    = { fg = c.number },



    LspReferenceText            = { bg = c.bg_visual, bold = true },
    LspReferenceRead            = { bg = c.bg_visual, bold = true },
    LspReferenceWrite           = { bg = c.bg_visual, bold = true },
    LspSignatureActiveParameter = { bg = c.bg_visual, bold = true },
    LspCodeLens                 = { fg = c.green },
    LspInlayHint                = { bg = c.green0, fg = c.fg },
    LspInfoBorder               = { fg = c.lightgreen, bg = c.statusbar },
    ComplHint                   = { fg = c.bg },


    DiagnosticError             = { fg = c.red0 },
    DiagnosticWarn              = { fg = c.yellow },
    DiagnosticInfo              = { fg = c.cyan0 },
    DiagnosticHint              = { fg = c.blue },
    DiagnosticUnnecessary       = { fg = c.green },
    DiagnosticVirtualTextError  = { fg = c.red0, bg = "NONE" },
    DiagnosticVirtualTextWarn   = { bg = c.yellow1 },
    DiagnosticVirtualTextInfo   = { fg = c.blue, bg = "NONE" },
    DiagnosticVirtualTextHint   = { bg = c.blue },

    DiagnosticUnderlineError    = {
      underline = opts.styles.diagnostic.underline,
      undercurl = not opts.styles.diagnostic.underline,
      sp = c.red0,
      fg = opts.styles.diagnostic.error.highlight and c.bg or c.red1,
      bg = opts.styles.diagnostic.error.highlight and c.red1 or c.none,
    },
    DiagnosticUnderlineWarn     = {
      underline = opts.styles.diagnostic.underline,
      undercurl = not opts.styles.diagnostic.underline,
      sp = c.yellow,
      fg = opts.styles.diagnostic.warn.highlight and c.bg or c.yellow,
      bg = opts.styles.diagnostic.warn.highlight and c.yellow or c.none,
    },
    DiagnosticUnderlineInfo     = {
      underline = opts.styles.diagnostic.underline,
      undercurl = not opts.styles.diagnostic.underline,
      sp = c.cyan0,
      fg = opts.styles.diagnostic.info.highlight and c.bg or c.cyan0,
      bg = opts.styles.diagnostic.info.highlight and c.cyan0 or c.none,
    },
    DiagnosticUnderlineHint     = {
      underline = opts.styles.diagnostic.underline,
      undercurl = not opts.styles.diagnostic.underline,
      sp = c.blue,
      fg = opts.styles.diagnostic.hint.highlight and c.bg or c.blue,
      bg = opts.styles.diagnostic.hint.highlight and c.blue or c.none,
    },


    healthError                 = { fg = c.red },
    healthSuccess               = { fg = c.green1 },
    healthWarning               = { fg = c.yellow0 },


    diffAdded                   = { bg = c.diff.add, fg = c.git.add },
    diffRemoved                 = { bg = c.diff.delete, fg = c.git.delete },
    diffChanged                 = { bg = c.diff.change, fg = c.git.change },
    diffOldFile                 = { bg = c.blue0, fg = c.fg },
    diffNewFile                 = { bg = c.green1, fg = c.fg },
    diffFile                    = { fg = c.blue },
    diffLine                    = { fg = c.green },
    diffIndexLine               = { fg = c.pink },
    helpExample                 = { fg = c.green },
	}
end

return M
